{"version":3,"file":"IterableHist.js","sourceRoot":"","sources":["IterableHist.ts"],"names":[],"mappings":";;AAAA,qCAAkC;AAClC,mDAAgD;AAEhD;IAcI,sBAAY,OAAmB,EAAE,SAAmC,EAAE,OAAkB,EAAE,OAAqB,EAAE,UAAkB,EACvH,cAAgC,EAAE,aAAyB,EAAE,QAAiB,EAAE,gBAAyB,EACzG,aAAqB,EAAE,KAAa,EAAE,6BAAqD;QACnG,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QAC7C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QAC7C,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;QAClE,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,6BAA6B,GAAG,6BAA6B,CAAC;IACvE,CAAC;IAEO,sCAAe,GAAvB,UAAwB,OAAkB;QACtC,IAAI,MAAM,GAAc,EAAE,CAAC;QAC3B,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;YACb,IAAA,YAAC,EAAE,YAAC,EAAE,gBAAG,EAAE,8BAAU,EAAE,0BAAQ,EAAE,8BAAU,CAAW;YAC3D,MAAM,CAAC,IAAI,CAAC,IAAI,iBAAO,CAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,UAAU,EAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC;QACtE,CAAC,CAAC,CAAA;QACF,OAAO,MAAM,CAAC;IAClB,CAAC;IAEO,sCAAe,GAAvB,UAAwB,OAAqB;QACzC,IAAI,MAAM,GAAiB,EAAE,CAAC;QAC9B,OAAO,CAAC,OAAO,CAAC,UAAA,EAAE;YACd,IAAI,KAAK,GAAe,EAAE,CAAC;YAC3B,EAAE,CAAC,OAAO,CAAC,UAAA,EAAE;gBACT,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;YAC3B,CAAC,CAAC,CAAA;YACF,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;IAClB,CAAC;IAEO,6CAAsB,GAA9B,UAA+B,cAAgC;QAC3D,IAAI,MAAM,GAAqB,EAAE,CAAC;QAClC,cAAc,CAAC,OAAO,CAAC,UAAA,aAAa;YAC3B,IAAA,mBAAC,EAAE,mBAAC,EAAE,uBAAG,EAAE,2CAAa,CAAkB;YAC/C,MAAM,CAAC,IAAI,CAAC,IAAI,+BAAc,CAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,aAAa,CAAC,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAA;QACF,OAAO,MAAM,CAAC;IAClB,CAAC;IACL,mBAAC;AAAD,CAAC,AA5DD,IA4DC;AA5DY,oCAAY","sourcesContent":["import {Changes} from \"./Changes\";\nimport {OptionsChanges} from \"./OptionsChanges\";\n\nexport class IterableHist {\n    current: string[][];\n    nextIndex: {y: number, x: number};\n    changes: Changes[]\n    options: string[][][];\n    optionsIdx: number;\n    optionsChanges: OptionsChanges[];\n    startLastTime: string[][];\n    finished: boolean;\n    solutionPossible: boolean;\n    solvingStatus: string;\n    flags: number;\n    spaceToStartNextIterationFrom: {y: number, x:number}\n\n    constructor(current: string[][], nextIndex: { y: number; x: number }, changes: Changes[], options: string[][][], optionsIdx: number,\n                optionsChanges: OptionsChanges[], startLastTime: string[][], finished: boolean, solutionPossible: boolean,\n                solvingStatus: string, flags: number, spaceToStartNextIterationFrom: {y: number, x: number}) {\n        this.current = current;\n        this.nextIndex = nextIndex;\n        this.changes = this.makeChangesCopy(changes);\n        this.options = this.makeOptionsCopy(options);\n        this.optionsIdx = optionsIdx;\n        this.optionsChanges = this.makeOptionsChangesCopy(optionsChanges);\n        this.startLastTime = startLastTime;\n        this.finished = finished;\n        this.solutionPossible = solutionPossible;\n        this.solvingStatus = solvingStatus;\n        this.flags = flags;\n        this.spaceToStartNextIterationFrom = spaceToStartNextIterationFrom;\n    }\n\n    private makeChangesCopy(changes: Changes[]): Changes[]{\n        let newArr: Changes[] = [];\n        changes.forEach(change => {\n            let {y, x, val, isOriginal, lookedAt, prevChange} = change;\n            newArr.push(new Changes(y,x,val,isOriginal,lookedAt, prevChange));\n        })\n        return newArr;\n    }\n\n    private makeOptionsCopy(options: string[][][]): string[][][] {\n        let newArr: string[][][] = [];\n        options.forEach(r1 => {\n            let arr2d: string[][] = [];\n            r1.forEach(r2 => {\n                arr2d.push(r2.slice());\n            })\n            newArr.push(arr2d);\n        });\n        return newArr;\n    }\n\n    private makeOptionsChangesCopy(optionsChanges: OptionsChanges[]): OptionsChanges[] {\n        let newArr: OptionsChanges[] = [];\n        optionsChanges.forEach(optionsChange => {\n            let {y, x, val, inEveryOption} = optionsChange;\n            newArr.push(new OptionsChanges(y,x,val,inEveryOption));\n        })\n        return newArr;\n    }\n}\n"]}