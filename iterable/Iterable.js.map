{"version":3,"file":"Iterable.js","sourceRoot":"","sources":["Iterable.ts"],"names":[],"mappings":"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","sourcesContent":["import {IterableHist} from \"./IterableHist\";\nimport {Changes} from \"./Changes\";\nimport {OptionsChanges} from \"./OptionsChanges\";\nimport {InfoForSite} from \"./InfoForSite\";\n\nexport class Iterable {\n    private current: string[][];\n    private flags: number;\n    private solution: string[][];\n    finished: boolean;\n    solutionPossible: boolean;\n    private nextIndex: {y: number, x: number};\n    private changes: Changes[]\n    private options: string[][][];\n    private optionsIdx: number;\n    private optionsChanges: OptionsChanges[];\n    private startLastTime: string[][];\n    private solvingStatus: string;\n    private spaceToStartNextIterationFrom: {y: number, x: number};\n    private history: IterableHist[];\n\n    constructor(current: string[][], solution: string[][], flags: number) {\n        this.current = current;\n        this.flags = flags;\n        this.solution = solution;\n        this.finished = false;\n        this.solutionPossible = true;\n        this.nextIndex = {y: 0, x: 0};\n        this.changes = [];\n        this.options = [];\n        this.optionsIdx = 0;\n        this.optionsChanges = [];\n        this.startLastTime = this.makeBoardCopy(current);\n        this.solvingStatus = \"Not yet started.\";\n        this.spaceToStartNextIterationFrom = {y: 999, x: 999};\n        this.history = [];\n        this.storeHistory();\n    }\n\n    private openAllRemainingSquares(): InfoForSite {\n        for (let y = 0; y<this.current.length; y++) {\n            for (let x = 0; x<this.current[y].length; x++) {\n                if (this.current[y][x] == \"?\") {\n                    let val = this.open(y,x);\n                    this.changes.push(new Changes(y, x, val, false, true, -1));\n                }\n            }\n        }\n        this.solvingStatus = \"Used all our flags, so reminaing squares are opened. Board is now solved.\";\n        this.finished = true;\n        return this.getReturnObj();\n    }\n\n    next(): InfoForSite {\n        if (!this.finished && this.solutionPossible) {\n            if (this.flags == 0) {\n                return this.openAllRemainingSquares();\n            }\n\n            let toRecurseFromIndex: number = this.getLatestChangeIndexToLookAt();\n                if (toRecurseFromIndex == -1) {\n                    //then we have no chain to look through and need to just continue looping through array as usual\n                    this.changes = [];\n                    if (this.nextIndex.y <= this.current.length-1) {\n                        return this.moveToNextSquare();\n                    } else if (!this.equal2dArrays(this.current,this.startLastTime)) {\n                        //something changed, go back to beginning of array and try again.\n                        return this.moveBackToStartOfArray();\n                    } else {\n                        //nothing changed. we need to calculate permutations of available spaces to move forward.\n                        return this.calcBoardPermutations();\n                    }\n                } else {\n                    //then we have a current chain to look through\n                    let {y, x, val} = this.changes[toRecurseFromIndex];\n                    if (val == \"?\" && y < this.spaceToStartNextIterationFrom.y && x < this.spaceToStartNextIterationFrom.x) {\n                        this.setNextIterationStartSpace(y,x);\n                    }\n                    this.tryOpenAroundSquare(y, x, toRecurseFromIndex);\n                    this.changes[toRecurseFromIndex].lookedAt = true;\n                    this.storeHistory();\n                    this.solvingStatus = `Looking through chain to open boxes. Currently looking at the darkest purple square (val: ${val}) to see if any surrounding\n                    boxes can be opened. Turquoise boxes are those opened by the current chain.`\n                    return this.getReturnObj();\n                }\n        } else {\n            this.solvingStatus = this.solutionPossible ? \"Solved.\" : \"Unsolvable.\"\n            return this.getReturnObj();\n        }\n    }\n\n    setNextIterationStartSpace(y: number, x: number) {\n        let obj = {y,x};\n        if (y-1 >= 0) {\n            if (x-1 >= 0) {\n                obj = {y: y-1, x: x-1}\n            } else {\n                obj = {y: y-1, x}\n            }\n        } else if (x-1 >= 0) {\n            obj = {y, x:x-1}\n        }\n        this.spaceToStartNextIterationFrom = obj;\n    }\n\n    prev(): InfoForSite {\n        //restoring class fields to how they were on previous iteration.\n        let lastState = this.history[this.history.length-2];\n        let {current, nextIndex,changes, options, optionsIdx, optionsChanges, startLastTime, finished,\n            solutionPossible, solvingStatus, flags, spaceToStartNextIterationFrom} = lastState;\n        this.current = current;\n        this.nextIndex = nextIndex;\n        this.changes = changes;\n        this.options = options;\n        this.optionsIdx = optionsIdx;\n        this.optionsChanges = optionsChanges;\n        this.startLastTime = startLastTime;\n        this.finished = finished;\n        this.solutionPossible = solutionPossible;\n        this.solvingStatus = solvingStatus;\n        this.flags = flags;\n        this.spaceToStartNextIterationFrom = spaceToStartNextIterationFrom;\n        this.history = this.history.slice(0, this.history.length-1);\n        return this.getReturnObj();\n    }\n\n    getReturnObj(): InfoForSite {\n        let {changes, optionsChanges, finished, solutionPossible, flags, current, solvingStatus} = this;\n        return new InfoForSite(changes, optionsChanges, finished, solutionPossible, flags, current, solvingStatus);\n    }\n\n    private moveToNextSquare(): InfoForSite {\n        let {y,x} = this.nextIndex;\n        // this.tryOpenAroundSquare(i, j);\n        this.changes.unshift(new Changes(y,x,this.current[y][x], true, false, -1));\n        this.nextIndex = (x==this.current[0].length-1) ? {y: y+1, x: 0} : {y: y, x:x+1};\n        this.storeHistory();\n        this.solvingStatus = \"Moving to next square and seeing if any surrounding squares can be opened or flagged.\"\n        return this.getReturnObj();\n    }\n\n    private moveBackToStartOfArray(): InfoForSite {\n        this.startLastTime = this.makeBoardCopy(this.current);\n        this.options = [];\n        this.optionsChanges = [];\n        this.nextIndex = this.spaceToStartNextIterationFrom;\n        this.spaceToStartNextIterationFrom = {y: 999, x: 999};\n        this.storeHistory();\n        this.solvingStatus = \"Moving back to start of the board.\"\n        return this.getReturnObj();\n    }\n\n    private calcBoardPermutations(): InfoForSite{\n        if (this.options.length == 0) {\n            //we've come to the end of the array and unable to change anything. look for possibilities.\n            this.getPossiblePositions(this.current, this.flags);\n            this.optionsIdx = 0;\n        }\n        if (this.optionsIdx != this.options.length) {\n            //return to user the changes that would be made if the curent option was implemented.\n            let nextBoard = this.options[this.optionsIdx];\n            this.getOptionsChangesFromCurrent(nextBoard);\n            this.optionsIdx++;\n            this.storeHistory();\n            this.solvingStatus = `Showing permutation ${this.optionsIdx} of ${this.options.length}.`\n            return this.getReturnObj();\n        } else {\n            //we've reached the end of the options. we make permanent any changes that appeared in all options.\n            let changes = this.optionsChanges.filter(x => x.inEveryOption);\n            changes.forEach(change => {\n                let {y,x,val} = change;\n                if (val == \"b\") {\n                    this.flags--;\n                    this.current[y][x] = \"x\";\n                    this.changes.push(new Changes(y,x, \"x\", true, true, -1))\n                } else if (val == \"t\") {\n                    this.current[y][x] = this.open(y,x);\n                    this.changes.push(new Changes(y,x, this.current[y][x],  true,  false, -1));\n                }\n            })\n            if (this.equal2dArrays(this.current, this.startLastTime) && !this.checkIfFinished()) {\n                this.solutionPossible = false;\n                // return \"?\";\n            } else if (this.checkIfFinished()) {\n                this.finished = true;\n            }\n            this.startLastTime = this.makeBoardCopy(this.current);\n            this.options = [];\n            this.optionsChanges = [];\n            this.nextIndex = this.spaceToStartNextIterationFrom;\n            this.spaceToStartNextIterationFrom = {y: 999, x:999}\n            this.storeHistory();\n            this.solvingStatus = \"Any squares that were bombs or spaces throughout ALL permutations are made permanent.\"\n            return this.getReturnObj();\n        }\n    }\n\n    storeHistory() {\n        this.history.push(\n            new IterableHist(this.makeBoardCopy(this.current),\n                this.nextIndex,\n                this.changes,\n                this.options,\n                this.optionsIdx,\n                this.optionsChanges,\n                this.makeBoardCopy(this.startLastTime),\n            this.finished,\n            this.solutionPossible,\n                this.solvingStatus,\n                this.flags,\n                this.spaceToStartNextIterationFrom)\n        );\n    }\n    \n    checkIfFinished() {\n        for (let i = 0; i < this.current.length; i++) {\n            for (let j = 0; j < this.current[0].length; j++) {\n                if (this.current[i][j] == \"?\") {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    //method identifying which squares the current pemutation would change so they can be displayed to the user.\n    getOptionsChangesFromCurrent(board: string[][]) {\n        let newOptionsChanges: OptionsChanges[] = []\n        for (let i = 0; i< board.length; i++) {\n            for (let j = 0; j<board[0].length; j++) {\n                if (board[i][j] != this.current[i][j]) {\n                    if (this.optionsChanges.length == 0) {\n                        //on first iteration - inEvery option has to be true.\n                        newOptionsChanges.push(new OptionsChanges(i,j, board[i][j], true));\n                    } else {\n                        let added = false;\n                        for (let a = 0; a<this.optionsChanges.length; a++) {\n                            if (this.optionsChanges[a].y == i && this.optionsChanges[a].x == j &&\n                                this.optionsChanges[a].inEveryOption && this.optionsChanges[a].val == board[i][j]) {\n                                newOptionsChanges.push(new OptionsChanges(i,j, board[i][j], true));\n                                added=true;\n                                break;\n                            }\n                        }\n\n                        if (!added) {\n                            newOptionsChanges.push(new OptionsChanges(i,j, board[i][j], false))\n                        }\n\n                    }\n                }\n            }\n        }\n        this.optionsChanges = newOptionsChanges;\n    }\n\n    getPossiblePositions(_board: string[][], _numBombs: number) {\n        var options: string[][][] = []\n        const recurse = (board: string[][], numBombs: number, _i: number = 0, _j: number = 0): void => {\n            //using firstIteration so loop can start at where we last changed, but also start at 0 on the next line\n            var firstIteration = true\n            for (var i = _i; i<board.length; i++) {\n                for (var j = firstIteration ? _j : 0; j<board[0].length; j++) {\n                    if (isNaN(+board[i][j])) continue;\n\n                    var sqInfo = this.getSquareInfo(board, i, j);\n                    var flagsNeeded = +sqInfo.boxNumber - sqInfo.surrFlagged.length;\n                    //doing checks so we can stop iterating if a number is invalid, or continue if there's nothing to do\n                    //invalid\n                    if (sqInfo.surrFlagged.length > +sqInfo.boxNumber) return;\n                    if (flagsNeeded>numBombs) return;\n                    if (flagsNeeded>sqInfo.surrAvailable.length) return;\n\n                    //nothing to do\n                    if (sqInfo.surrAvailable.length === 0) continue;\n                    if (flagsNeeded === 0) {\n                        var nBoard = this.makeBoardCopy(board);\n                        for (let i = 0; i<sqInfo.surrAvailable.length; i++) {\n                            let pos = sqInfo.surrAvailable[i];\n                            nBoard[pos.y][pos.x] = \"t\"\n                        }\n                        return recurse(nBoard, numBombs, i, j)\n                    };\n\n                    var updatedNumbBombs = numBombs-flagsNeeded\n\n                    //making array that we can plug into combinations generator\n                    //b is for a predicted bomb and t is for predicted taken space\n                    var array = new Array(sqInfo.surrAvailable.length);\n                    for (let i = 0; i<array.length; i++) {\n                        array[i] = \"t\";\n                    }\n                    for (var a = 0; a<flagsNeeded; a++) {\n                        array[a] = \"b\"\n                    }\n                    var possibilities = this.combinations(array)\n\n                    // @ts-ignore\n                    possibilities.forEach(possibility => {\n                        var nBoard = this.makeBoardCopy(board);\n                        for (let i = 0; i<sqInfo.surrAvailable.length; i++) {\n                            let pos = sqInfo.surrAvailable[i];\n                            nBoard[pos.y][pos.x] = possibility[i]\n                        }\n                        recurse(nBoard, updatedNumbBombs, i, j)\n                    });\n                    return;\n                }\n                firstIteration = false;\n            }\n            options.push(board)\n        }\n        recurse(_board, _numBombs)\n        this.options = options;\n    }\n\n    getBombOptions(board: string[][], numBombs: number, _i = 0, _j = 0): void {\n        //using firstIteration so loop can start at where we last changed, but also start at 0 on the next line\n        var firstIteration = true\n        for (var i = _i; i<board.length; i++) {\n            for (var j = firstIteration ? _j : 0; j<board[0].length; j++) {\n                if (isNaN(+board[i][j])) continue;\n\n                var sqInfo = this.getSquareInfo(this.current, i, j)\n                var flagsNeeded = +sqInfo.boxNumber - sqInfo.surrFlagged.length;\n\n                //doing checks so we can stop iterating if a number is invalid, or continue if there's nothing to do\n                //invalid\n                if (sqInfo.surrFlagged.length > +sqInfo.boxNumber) return;\n                if (flagsNeeded>numBombs) return;\n                if (flagsNeeded>sqInfo.surrAvailable.length) return;\n\n                //nothing to do\n                if (sqInfo.surrAvailable.length === 0) continue;\n                if (flagsNeeded === 0) {\n                    var nBoard = this.makeBoardCopy(board);\n                    for (let i = 0; i<sqInfo.surrAvailable.length; i++) {\n                        let pos = sqInfo.surrAvailable[i];\n                        nBoard[pos.y][pos.x] = \"t\"\n                    }\n                    return this.getBombOptions(nBoard, numBombs, i, j)\n                }\n\n                var updatedNumbBombs = numBombs-flagsNeeded\n\n                //making array that we can plug into combinations generator\n                //b is for a predicted bomb and t is for predicted taken space\n                var array: string[] = new Array(sqInfo.surrAvailable.length).map(x => \"t\");\n                for (var a = 0; a<flagsNeeded; a++) {\n                    array[a] = \"b\"\n                }\n                var possibilities = this.combinations(array)\n\n                // @ts-ignore\n                possibilities.forEach((possibility: string[]) => {\n                    var nBoard = this.makeBoardCopy(board);\n                    for (let i = 0; i<sqInfo.surrAvailable.length; i++) {\n                        let pos = sqInfo.surrAvailable[i];\n                        nBoard[pos.y][pos.x] = possibility[i]\n                    }\n                    this.getBombOptions(nBoard, updatedNumbBombs, i, j)\n                });\n                return;\n            }\n            firstIteration = false;\n        }\n        this.options.push(board)\n    }\n\n    combinations(array: string[]) {\n        var perms = this.permutations(array)\n        for (var i = 0; i<perms.length-1; i++) {\n            for (var j = i+1; j<perms.length; j++) {\n                // @ts-ignore\n                if (this.equalArrays(perms[i], perms[j])) {perms.splice(j, 1); j--;}\n            }\n        }\n        return perms\n    }\n\n    //slices 1 off the front of the array until we get to 2 elements, then we get the 2 permutations by rotating\n    //through the values\n    //then add back on the last element removed, rotate through to get the combinations and continue until there\n    //are no more sliced values to add back on.\n    permutations(array: string[]) {\n        var result: string[][] = []\n        if (array.length === 1) return array;\n        if (array.length === 2) return [array.slice(),[array.pop(), array.pop()]]\n        // @ts-ignore\n        var next = this.permutations(array.slice(1)).map((each: string[]) => {each.unshift(array[0]); return each})\n        next.forEach((perm: string[]) => {\n            for (var i = 0; i<perm.length; i++) {\n                // @ts-ignore\n                perm.push(perm.shift());\n                var arrays = perm.slice(); //copy needed otherwise the term pushed in is \"circular object array\"\n                result.push(arrays)\n            }\n        });\n        return result\n    }\n\n    equalArrays(array1: any[], array2: any[]) {\n        for (var i = 0; i<array1.length; i++) {\n            if (array1[i] !== array2[i]) return false\n        }\n        return true\n    }\n\n    equal2dArrays(array1: any[], array2: any[]) {\n        for (var i = 0; i<array1.length; i++) {\n            for (let j = 0; j<array1[0].length; j++) {\n                if (array1[i][j] !== array2[i][j]) return false\n            }\n        }\n        return true\n    }\n\n    makeBoardCopy(board: string[][]) {\n        var copy = board.slice();\n        return copy.map(x => x.slice())\n    }\n\n    getSurroundingSquares(i: number, j: number) {\n        let squares = [];\n        let toLeft = j-1, toUp = i-1, toRight = j+1, toDown = i+1;\n        let leftValid = toLeft >= 0, upValid = toUp >= 0, rightValid = toRight < this.current[0].length, downValid = toDown < this.current.length;\n        //left\n        if (leftValid) {\n            if (upValid) squares.push({i:toUp, j:toLeft});\n            squares.push({i, j: toLeft});\n            if (downValid) squares.push({i:toDown, j:toLeft});\n        }\n        //central\n        if (upValid) squares.push({i:toUp, j});\n        if (downValid) squares.push({i:toDown, j})\n        //right\n        if (rightValid) {\n            if (upValid) squares.push({i:toUp, j:toRight});\n            squares.push({i, j: toRight});\n            if (downValid) squares.push({i:toDown, j:toRight});\n        }\n\n        return squares;\n    }\n\n    tryOpenAroundSquare(i: number, j: number, prevChangeIndex: number) {\n        var info = this.getSquareInfo(this.current, i, j);\n        var avail = info.surrAvailable;\n        //if we don't need any more flags\n        if (info.surrFlagged.length === +info.boxNumber) {\n            for (var a = 0; a<avail.length; a++) {\n                var val = this.open(avail[a].y,avail[a].x)\n                this.current[avail[a].y][avail[a].x] = val\n                this.changes.push(new Changes(avail[a].y, avail[a].x, val, false, false, prevChangeIndex));\n            }\n        }\n        //if we need flags and there are no spare spaces\n        let extraFlagsNeeded = +info.boxNumber - info.surrFlagged.length\n        if (extraFlagsNeeded - info.surrAvailable.length === 0) {\n            for (var b = 0; b<avail.length; b++) {\n                this.current[avail[b].y][avail[b].x] = \"x\"\n                this.changes.push(new Changes(avail[b].y, avail[b].x, \"x\", false, true, prevChangeIndex));\n                this.flags--;\n            }\n        }\n    }\n\n    open(y: number, x: number): string {\n        let ans = this.solution[y][x];\n        if (ans == \"x\") {\n            throw new Error(\"Opened a bomb!!!!!\");\n        } else {\n            return ans;\n        }\n    }\n\n    getLatestChangeIndexToLookAt(): number {\n        for (let i = this.changes.length-1; i>=0; i--) {\n            if (!this.changes[i].lookedAt) {\n                this.changes[i].lookedAt = true;\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    getSquareInfo(board: string[][], i: number, j: number) {\n        let info: {boxNumber: string, surrFlagged: {y: number, x: number}[], surrAvailable: {y: number, x: number}[]}\n\n        info = {\n            boxNumber: board[i][j],\n            surrFlagged: [],\n            surrAvailable: []\n        }\n\n        //checking that the space we're looking at is a number\n        if (\"x?\".indexOf(board[i][j]) != -1) return info;\n        //now collecting info\n        //try and catch blocks so that if we select an element that is not within the board the error doesn't break our program\n        //boxes in row above\n        try {if (\"x?b\".indexOf(board[i-1][j-1]) !== -1) {\n            let posObj = {y: i-1, x: j-1}\n            \"x?b\".indexOf(board[i-1][j-1]) === 1 ? info.surrAvailable.push(posObj) : info.surrFlagged.push(posObj);\n        }} catch(e) {}\n        try {if (\"x?b\".indexOf(board[i-1][j]) !== -1) {\n            let posObj = {y: i-1, x: j}\n            \"x?b\".indexOf(board[i-1][j]) === 1 ? info.surrAvailable.push(posObj) : info.surrFlagged.push(posObj);\n        }} catch(e) {}\n        try {if (\"x?b\".indexOf(board[i-1][j+1]) !== -1) {\n            let posObj = {y: i-1, x: j+1}\n            \"x?b\".indexOf(board[i-1][j+1]) === 1 ? info.surrAvailable.push(posObj) : info.surrFlagged.push(posObj);\n        }} catch(e) {}\n\n        //boxes on same row\n        try {if (\"x?b\".indexOf(board[i][j-1]) !== -1) {\n            let posObj = {y: i, x: j-1}\n            \"x?b\".indexOf(board[i][j-1]) === 1 ? info.surrAvailable.push(posObj) : info.surrFlagged.push(posObj);\n        }} catch(e) {}\n        try {if (\"x?b\".indexOf(board[i][j+1]) !== -1) {\n            let posObj = {y: i, x: j+1}\n            \"x?b\".indexOf(board[i][j+1]) === 1 ? info.surrAvailable.push(posObj) : info.surrFlagged.push(posObj);\n        }} catch(e) {}\n        //boxes beneath\n        try {if (\"x?b\".indexOf(board[i+1][j-1]) !== -1) {\n            let posObj = {y: i+1, x: j-1}\n            \"x?b\".indexOf(board[i+1][j-1]) === 1 ? info.surrAvailable.push(posObj) : info.surrFlagged.push(posObj);\n        }} catch(e) {}\n        try {if (\"x?b\".indexOf(board[i+1][j]) !== -1) {\n            let posObj = {y: i+1, x: j}\n            \"x?b\".indexOf(board[i+1][j]) === 1 ? info.surrAvailable.push(posObj) : info.surrFlagged.push(posObj);\n        }} catch(e) {}\n        try {if (\"x?b\".indexOf(board[i+1][j+1]) !== -1) {\n            let posObj = {y: i+1, x: j+1}\n            \"x?b\".indexOf(board[i+1][j+1]) === 1 ? info.surrAvailable.push(posObj) : info.surrFlagged.push(posObj);\n        }} catch(e) {}\n\n        return info\n    }\n}\n"]}